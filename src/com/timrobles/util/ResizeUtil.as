package com.timrobles.util {    import flash.display.DisplayObject;    import flash.geom.Rectangle;        /**	 * @author Antti Kupila	 */	public class ResizeUtil {		//---------------------------------------------------------------------		//		//  Constructor		//		//---------------------------------------------------------------------		public function ResizeUtil() {		}				//---------------------------------------------------------------------		//		//  Public methods		//		//---------------------------------------------------------------------				/**		 * Resizes an object to fit within a specific size. Overflow cannot occur.		 * 		 * @param target Display object to resize		 * @param width Maximum width		 * @param height Maximum height		 */		static public function fit( target : DisplayObject, width : Number, height : Number ) : void {			var aspectRatio : Number = target.width / target.height;			if ( width >= height * aspectRatio ) {				width = height * aspectRatio;			} else {				height = width / aspectRatio;			}			target.width = width;			target.height = height;		}		/**		 * Resizes an object to fill an specific size. Overflow will occur if needed.		 * 		 * @param target Display object to resize		 * @param width Minimum width		 * @param height Minimum height		 */		static public function fill( target : DisplayObject, width : Number, height : Number ) : void {			var aspectRatio : Number = target.width / target.height;			if ( width >= height * aspectRatio ) {				height = width / aspectRatio;			} else {				width = height * aspectRatio;			}			target.width = width;			target.height = height;		}				/**		 * Calculates the size for a fit but doesn't actually modify the size		 * 		 * @param sourceWidth Original width		 * @param sourceHeight Original height		 * @param width Maximum width		 * @param height Maximum height		 * 		 * @return A rectangle with the new width and height. x & y define the offset to center the new object in the middle of the resized size		 */		static public function getFitRect( sourceWidth : Number, sourceHeight : Number, width : Number, height : Number ) : Rectangle {			var aspectRatio : Number = sourceWidth / sourceHeight;			var targetWidth : Number = width;			var targetHeight : Number = height;			if ( width >= height * aspectRatio ) {				targetWidth = targetHeight * aspectRatio;			} else {				targetHeight = targetWidth / aspectRatio;			}			return new Rectangle( ( width - targetWidth ) * 0.5, ( height - targetHeight ) * 0.5, targetWidth, targetHeight );		}				/**		 * Calculates the size for a fill but doesn't actually modify the size		 * 		 * @param sourceWidth Original width		 * @param sourceHeight Original height		 * @param width Maximum width		 * @param height Maximum height		 * 		 * @return A rectangle with the new width and height. x & y define the offset to center the new object in the middle of the resized size (use a mask/scrollRect to crop)		 */		static public function getFillRect( sourceWidth : Number, sourceHeight : Number, width : Number, height : Number ) : Rectangle {			var aspectRatio : Number = sourceWidth / sourceHeight;			var targetWidth : Number = width;			var targetHeight : Number = height;			if ( targetWidth >= targetHeight * aspectRatio ) {				targetHeight = targetWidth / aspectRatio;			} else {				targetWidth = targetHeight * aspectRatio;			}			return new Rectangle( ( width - targetWidth ) * 0.5, ( height - targetHeight ) * 0.5, targetWidth, targetHeight );		}	}}