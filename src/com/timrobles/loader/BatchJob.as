package com.timrobles.loader {    import flash.events.Event;    import flash.events.EventDispatcher;    import flash.events.ProgressEvent;    import flash.events.TimerEvent;    import flash.utils.Timer;        /**	 * @author Tim Robles	 */	public class BatchJob extends EventDispatcher implements ILoadJob 	{		//----------------------------------		//  Private Members		//----------------------------------				private var files:Array;		private var loaded:uint = 0;		private var progressTimer:Timer;				//--------------------------------------------------------------------------		//		//  Constructor		//		//--------------------------------------------------------------------------				public function BatchJob(files:Array) 		{			this.files = files;			progressTimer = new Timer(100);			progressTimer.addEventListener(TimerEvent.TIMER, timerHandler);		}		//--------------------------------------------------------------------------		//		//  Public Methods		//		//--------------------------------------------------------------------------				public function load():void		{			for each (var file:ILoadJob in files)			{				file.addEventListener(Event.COMPLETE, fileCompleteHandler);				file.load();							}			dispatchEvent(new Event(Event.OPEN));			progressTimer.start();        }        public function cancel():void		{			progressTimer.reset();			for each (var file:ILoadJob in files)			{				file.cancel();			}		}				public function getPath():String		{			var fileNames:Array = [];			for each (var file:ILoadJob in files)			{				fileNames.push(file.getPath());			}			return fileNames.join(",");		}				public function getBytesLoaded():Number		{			var loaded:Number = 0;			for each (var file:ILoadJob in files)			{				loaded += file.getBytesLoaded();				}			return loaded;		}				public function getBytesTotal():Number		{			var total:Number = 0;			for each (var file:ILoadJob in files)			{				total += file.getBytesTotal();				}			return total;		}				public function getProgress():Number		{			return 0;		}				public function getData():*		{			var result:Array = [];			var len:uint = files.length;			for (var i:uint = 0; i < len; i++)				result.push(ILoadJob(files[i]).getData());			return result;		}				public function getFilesize():Number		{			return 0;		}				public function getLoadType():Class		{			return null;		}				public function get priority():int		{			return 0;		}				public function set priority(value:int):void		{		}				//--------------------------------------------------------------------------		//		//  Event Handlers		//		//--------------------------------------------------------------------------				private function fileCompleteHandler(event:Event):void		{			loaded++;			if (loaded == files.length)			{				progressTimer.reset();				dispatchEvent(new ProgressEvent(ProgressEvent.PROGRESS, false, false, getBytesTotal(), getBytesTotal()));                dispatchEvent(new Event(Event.COMPLETE));			}		}				private function timerHandler(timerEvent:TimerEvent):void		{			dispatchEvent(new ProgressEvent(ProgressEvent.PROGRESS, false, false, getBytesLoaded(), getBytesTotal()));        }    }}