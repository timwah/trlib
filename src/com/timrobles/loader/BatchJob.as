package com.timrobles.loader {	import flash.events.Event;	import flash.events.EventDispatcher;		/**	 * @author Tim Robles	 */	public class BatchJob extends EventDispatcher implements ILoadJob 	{		//----------------------------------		//  Private Members		//----------------------------------				private var files:Array;		private var loaded:uint = 0;				//--------------------------------------------------------------------------		//		//  Constructor		//		//--------------------------------------------------------------------------				public function BatchJob(files:Array) 		{			this.files = files;		}		//--------------------------------------------------------------------------		//		//  Public Methods		//		//--------------------------------------------------------------------------				public function load():void		{			for each (var file:ILoadJob in files)			{				file.addEventListener(Event.COMPLETE, fileCompleteHandler);				file.load();							}		}				public function cancel():void		{			for each (var file:ILoadJob in files)			{				file.cancel();			}		}				public function getPath():String		{			var fileNames:Array = [];			for each (var file:ILoadJob in files)			{				fileNames.push(file.getPath());			}			return fileNames.join(",");		}				public function getBytesLoaded():Number		{			var bytesLoaded:Number = 0;			for each (var file:ILoadJob in files)			{				bytesLoaded += file.getBytesLoaded();				}			return bytesLoaded;		}				public function getBytesTotal():Number		{			var bytesTotal:Number = 0;			for each (var file:ILoadJob in files)			{				bytesTotal += file.getBytesTotal();				}			return bytesTotal;		}				public function getProgress():Number		{			return 0;		}				public function getData():*		{			var result:Array = [];			var len:uint = files.length;			for (var i:uint = 0; i < len; i++)				result.push(ILoadJob(files[i]).getData());			return result;		}				public function getFilesize():Number		{			return 0;		}				public function getLoadType():Class		{			return null;		}				public function get priority():int		{			return 0;		}				public function set priority(value:int):void		{		}				//--------------------------------------------------------------------------		//		//  Event Handlers		//		//--------------------------------------------------------------------------				private function fileCompleteHandler(event:Event):void		{			loaded++;			if (loaded == files.length)				dispatchEvent(new Event(Event.COMPLETE));		}	}}