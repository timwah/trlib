package com.timrobles.text {    import flash.events.Event;    import flash.events.IOErrorEvent;    import flash.text.Font;    import flash.text.StyleSheet;    import flash.text.TextField;    import flash.text.TextFormat;    import flash.utils.Dictionary;        import com.timrobles.loader.ILoadJob;    import com.timrobles.loader.LoadJob;    import com.timrobles.loader.LoadQueue;    import com.timrobles.logger.Logger;        /**     * @author Tim Robles     */    public class StylizedTextField extends TextField {    	    	//----------------------------------    	//  Protected Variables    	//----------------------------------    	    	protected var runtimeFonts : Dictionary;    	protected var runtimeFont : String = "";    	protected var _autoEmbed : Boolean = false;    	    	//--------------------------------------------------------------------------    	//    	//  Constructor    	//    	//--------------------------------------------------------------------------    	    	public function StylizedTextField( value : Boolean = false ) {    		    		super();    		_autoEmbed = value;    		runtimeFonts = new Dictionary();    		    	}    	    	//--------------------------------------------------------------------------    	//    	//  Public Methods    	//    	//--------------------------------------------------------------------------    	    	override public function set styleSheet( value : StyleSheet ) : void {    		    		if ( !_autoEmbed ) {                super.styleSheet = value;                return;    		}    		    		var styles : Array = value.styleNames;    		var n : uint = styles.length;    		var tf : TextFormat = new TextFormat();    		var fonts : Array = Font.enumerateFonts( true );    		var names : Dictionary = new Dictionary();    		for each ( var font : Font in fonts )                names[ font.fontName ] = font;                    		for ( var i : uint = 0; i < n; i++ ) {                tf = value.transform( value.getStyle( styles[ i ] ) );                // if we have a font specified                if ( tf.font != null ) {                	// get each font                 	var fontList : Array = tf.font.split( "," );                	for each ( var fontName : String in fontList ) {                		// we already have this font                		if ( names[ fontName ] != null ) {                			super.styleSheet = value;                            break;                 		} else if ( runtimeFonts[ fontName ] != null ) {                        	runtimeFont = fontName;                        	defaultTextFormat = tf;                        	var job : ILoadJob = new LoadJob( runtimeFonts[ fontName ] );                        	job.addEventListener( Event.COMPLETE, completeHandler );                        	job.addEventListener( IOErrorEvent.IO_ERROR, ioErrorHandler );                        	LoadQueue.getInstance().add( job );                        	visible = false;                            break;	                        }                	}                }   	    		}    		    	}    	    	public function addRuntimeFont( fontName : String, url : String ) : void {    		            runtimeFonts[ fontName ] = url;            	    	}    	    	public function set autoEmbed( value : Boolean ) : void {    	            _autoEmbed = value;            	    	}    	    	public function get autoEmbed() : Boolean {    	            return _autoEmbed;            	    	}    	    	//--------------------------------------------------------------------------    	//    	//  Protected Methods    	//    	//--------------------------------------------------------------------------    	    	protected function completeHandler( event : Event ) : void {    		    		visible = true;    		var tf : TextFormat = defaultTextFormat;    		tf.font = runtimeFont;            defaultTextFormat = tf;    		setTextFormat( tf );    		embedFonts = true;    		    	}    	    	protected function ioErrorHandler( ioErrorEvent : IOErrorEvent ) : void {                Logger.log( "Font: " + runtimeFont + " was not found at: " + ILoadJob( ioErrorEvent.currentTarget ).getPath() );            		    	}    	    }    }